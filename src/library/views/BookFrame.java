/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package library.views;

import library.database.BookDAO;
import library.database.MemberDAO;
import library.models.Books;
import library.models.Member;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.util.List;

/**
 *
 * @author nxq78
 */
public class BookFrame extends javax.swing.JFrame {

    /**
     * Creates new form BookFrame
     */
    public BookFrame() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        mnguser = new javax.swing.JButton();
        mngbook = new javax.swing.JButton();
        mngrecord = new javax.swing.JButton();
        back = new javax.swing.JButton();
        search = new javax.swing.JButton();
        addbook = new javax.swing.JButton();
        listbook = new javax.swing.JButton();
        deletebook = new javax.swing.JButton();
        edit_book = new javax.swing.JButton();
        search_field = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mnguser.setBackground(new java.awt.Color(153, 255, 255));
        mnguser.setText("Quản lí người dùng ");
        mnguser.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                mnguserAncestorResized(evt);
            }
        });

        mngbook.setBackground(new java.awt.Color(153, 255, 255));
        mngbook.setText("Quản lí sách");
        mngbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngbookActionPerformed(evt);
            }
        });

        mngrecord.setBackground(new java.awt.Color(153, 255, 255));
        mngrecord.setText("Quản lí mượn / trả sách");
        mngrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngrecordActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(255, 204, 204));
        back.setText("Trở lại ");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        search.setBackground(new java.awt.Color(153, 255, 153));
        search.setText("Tìm kiếm");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        addbook.setText("Thêm sách");
        addbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbookActionPerformed(evt);
            }
        });

        listbook.setText("Danh sách sách");
        listbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listbookActionPerformed(evt);
            }
        });

        deletebook.setText("Xóa sách");
        deletebook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebookActionPerformed(evt);
            }
        });

        edit_book.setText("Sửa thông tin sách ");
        edit_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_bookActionPerformed(evt);
            }
        });

        search_field.setText("Tìm sách ,...");
        search_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_fieldActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "Mã sách", "Tên sách", "Tác giả ", "Nhà xuất bản", "Năm xuất bản", "Mã ISBN", "Mã thể loại", "Số lượng", "Sách có sẵn"
                }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(search_field, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(53, 53, 53)
                                                                .addComponent(search))
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(edit_book, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                                                .addComponent(deletebook, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(listbook, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(addbook, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(mnguser, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(148, 148, 148)
                                                                .addComponent(mngbook, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(149, 149, 149)
                                                                .addComponent(mngrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                                                                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(115, 115, 115))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(mnguser)
                                        .addComponent(mngbook)
                                        .addComponent(mngrecord)
                                        .addComponent(back))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(search_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(search))
                                .addGap(18, 18, 18)
                                .addComponent(addbook)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(listbook)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deletebook)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(edit_book)
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void search_fieldActionPerformed(ActionEvent evt) {

    }

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {
        // Lấy dữ liệu nhập vào từ ô tìm kiếm
        String searchText = search_field.getText().trim();

        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập thông tin tìm kiếm.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Tìm kiếm và hiển thị kết quả

        BookDAO bookDAO = new BookDAO();
        List<Books> books = bookDAO.searchBooks(searchText);


        if (books.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Cập nhật JTable với kết quả tìm kiếm
            updateBookTable(books);
        }
    }



    // Phương thức hiển thị tất cả sách
    private void listAllBooks() {
        List<Books> books = bookDAO.getAllBooks();
        updateBookTable(books);
    }

    // Phương thức cập nhật bảng với danh sách sách
    private void updateBookTable(List<Books> books) {
        // Lấy model của bảng
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

        // Xóa hết các dòng cũ trong bảng
        tableModel.setRowCount(0);

        // Thêm các sách tìm được vào bảng
        for (Books book : books) {
            Object[] row = new Object[]{
                    book.getBookId(),
                    book.getTitle(),
                    book.getAuthor(),
                    book.getPublisher(),
                    book.getYear(),
                    book.getIsbn(),
                    book.getCategoryId(),
                    book.getQuantity(),
                    book.getAvailable()
            };
            tableModel.addRow(row);  // Thêm một dòng vào bảng
        }
    }


    BookDAO bookDAO = new BookDAO() ;

    private void listbookActionPerformed(java.awt.event.ActionEvent evt) {
        // Lấy danh sách sách từ cơ sở dữ liệu

        List<Books> booksList = bookDAO.getAllBooks();

        // Cập nhật bảng jTable1 với dữ liệu sách
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trong bảng

        // Lặp qua danh sách sách và thêm từng sách vào bảng
        for (Books book : booksList) {
            Object[] row = new Object[]{
                    book.getBookId(),
                    book.getTitle(),
                    book.getAuthor(),
                    book.getPublisher(),
                    book.getYear(),
                    book.getIsbn(),
                    book.getCategoryId(),
                    book.getQuantity(),
                    book.getAvailable()
            };
            model.addRow(row);
        }
    }

    private void mnguserAncestorResized(java.awt.event.HierarchyEvent evt) {
//        // TODO add your handling code here:
//        AdminFrame adminFrame = new AdminFrame();
//        adminFrame.setVisible(true);
//        this.setVisible(false);
    }

    private void mngbookActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void mngrecordActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        RecordFrame recordFrame = new RecordFrame();
        this.setVisible(false);
    }

    private void backActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        AdminFrame adminFrame = new AdminFrame();
        adminFrame.setVisible(true);
        this.setVisible(false);
    }


    private void addbookActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void deletebookActionPerformed(java.awt.event.ActionEvent evt) {
        // Lấy chỉ số của dòng được chọn trong bảng
        int selectedRow = jTable1.getSelectedRow();

        // Kiểm tra nếu có dòng nào được chọn
        if (selectedRow != -1) {
            // Lấy bookId từ cột đầu tiên (giả sử cột đầu tiên chứa Mã sách)
            int bookId = (int) jTable1.getValueAt(selectedRow, 0);

            // Hiển thị hộp thoại xác nhận trước khi xóa
            int confirm = javax.swing.JOptionPane.showConfirmDialog(
                    this,
                    "Bạn có chắc chắn muốn xóa sách này?",
                    "Xác nhận xóa",
                    javax.swing.JOptionPane.YES_NO_OPTION,
                    javax.swing.JOptionPane.WARNING_MESSAGE
            );

            // Nếu người dùng chọn "Yes" (Đồng ý xóa)
            if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                // Gọi phương thức deleteBook trong BookDAO để xóa sách khỏi cơ sở dữ liệu
                boolean isDeleted = bookDAO.deleteBook(bookId);

                if (isDeleted) {
                    // Nếu xóa thành công, hiển thị thông báo thành công
                    javax.swing.JOptionPane.showMessageDialog(this, "Sách đã được xóa thành công!");

                    // Cập nhật lại bảng sau khi xóa
                    listbookActionPerformed(evt); // Gọi lại phương thức listbookActionPerformed để lấy lại danh sách sách
                } else {
                    // Nếu xóa thất bại, hiển thị thông báo lỗi
                    javax.swing.JOptionPane.showMessageDialog(this, "Có lỗi xảy ra, không thể xóa sách.");
                }
            } else {
                // Nếu người dùng chọn "No", không làm gì cả
                javax.swing.JOptionPane.showMessageDialog(this, "Hủy thao tác xóa.");
            }
        } else {
            // Nếu không có dòng nào được chọn, thông báo cho người dùng
            javax.swing.JOptionPane.showMessageDialog(this, "Vui lòng chọn sách để xóa.");
        }
    }



    private void edit_bookActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton addbook;
    private javax.swing.JButton back;
    private javax.swing.JButton deletebook;
    private javax.swing.JButton edit_book;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton listbook;
    private javax.swing.JButton mngbook;
    private javax.swing.JButton mngrecord;
    private javax.swing.JButton mnguser;
    private javax.swing.JButton search;
    private javax.swing.JTextField search_field;
    // End of variables declaration
}
